=== modified file 'vapi/indicator-0.4.vapi'
--- vapi/indicator-0.4.vapi	2012-07-02 11:14:18 +0000
+++ vapi/indicator-0.4.vapi	2013-10-15 20:44:53 +0000
@@ -1,7 +1,7 @@
 /* indicator-0.4.vapi generated by vapigen, do not modify. */
 
 namespace Indicator {
-	[CCode (cheader_filename = "libindicator/indicator-desktop-shortcuts.h", type_check_function = "INDICATOR_IS_DESKTOP_SHORTCUTS", type_id = "indicator_desktop_shortcuts_get_type")]
+	[CCode (cheader_filename = "libindicator/indicator-desktop-shortcuts.h", type_check_function = "INDICATOR_IS_DESKTOP_SHORTCUTS", type_id = "indicator_desktop_shortcuts_get_type ()")]
 	public class DesktopShortcuts : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public DesktopShortcuts (string file, string identity);
@@ -12,7 +12,7 @@
 		[NoAccessorMethod]
 		public string identity { owned get; construct; }
 	}
-	[CCode (cheader_filename = "libindicator/indicator-object.h", type_check_function = "INDICATOR_IS_OBJECT", type_id = "indicator_object_get_type")]
+	[CCode (cheader_filename = "libindicator/indicator-object.h", type_check_function = "INDICATOR_IS_OBJECT", type_id = "indicator_object_get_type ()")]
 	public class Object : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Object ();
@@ -83,7 +83,7 @@
 		public static void activate_window (Indicator.Object io, Indicator.ObjectEntry entry, uint windowid, uint timestamp);
 		public static void close (Indicator.Object io, Indicator.ObjectEntry entry, uint timestamp);
 	}
-	[CCode (cheader_filename = "libindicator/indicator-service.h", type_check_function = "INDICATOR_IS_SERVICE", type_id = "indicator_service_get_type")]
+	[CCode (cheader_filename = "libindicator/indicator-service.h", type_check_function = "INDICATOR_IS_SERVICE", type_id = "indicator_service_get_type ()")]
 	public class Service : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public Service (string name);
@@ -103,7 +103,7 @@
 		public uint version { get; set; }
 		public virtual signal void shutdown ();
 	}
-	[CCode (cheader_filename = "libindicator/indicator-service-manager.h", type_check_function = "INDICATOR_IS_SERVICE_MANAGER", type_id = "indicator_service_manager_get_type")]
+	[CCode (cheader_filename = "libindicator/indicator-service-manager.h", type_check_function = "INDICATOR_IS_SERVICE_MANAGER", type_id = "indicator_service_manager_get_type ()")]
 	public class ServiceManager : GLib.Object {
 		[CCode (has_construct_function = false)]
 		public ServiceManager (string dbus_name);

